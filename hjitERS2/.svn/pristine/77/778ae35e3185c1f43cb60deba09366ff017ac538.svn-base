package kr.co.hjitERS.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

import kr.co.hjitERS.controller.ShipperController;
import kr.co.hjitERS.service.dao.SerialDAO;
import kr.co.hjitERS.util.FormatUtil;
import kr.co.hjitERS.vo.SerialMainVO;
import kr.co.hjitERS.vo.SerialSubVO;
import kr.co.hjitERS.vo.VirAcctVO;

@Service("serialService")
public class SerialServiceImpl implements SerialDAO{
	
	private static final Logger logger = LoggerFactory.getLogger(ShipperController.class);
	
	@Autowired
	private SerialDAO serialDAO;

	@Autowired
	private PlatformTransactionManager transactionManager;

	DefaultTransactionDefinition def = null;
	TransactionStatus status = null;

	@Override
	public String save(SerialMainVO beanMain, List<SerialSubVO> lstDataSub, List<VirAcctVO> lstDatainaccount) {
		String strErrMessage = "";
		int rtn = 0;
		
    	try {
			def = new DefaultTransactionDefinition();
			def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

			status = transactionManager.getTransaction(def);	
    		
    		//	1. 계산서 번호 생성
    		//beanMain.setSerial(this.getNewSerialSequence());
    		beanMain.setSerial(this.getNewSerial(beanMain.getIssue_date()));
    		logger.info("getNewSerial : " + beanMain.getSerial());
    		
    		//	2. 헤더저장
    		strErrMessage = String.valueOf(insertShipperMain(beanMain));
    		logger.info("insertShipperMain Result : " + strErrMessage);
    		
    		if(strErrMessage.equals("1")) {
				//3. 혹시나 해당 계산서가 생성되어있으면 컨테이너 인터페이스 테이블에서 계산서 정보 초기화
	        	ArrayList<SerialSubVO> lstData = serialDAO.getNewSerialSub(beanMain.getSerial());
	        	if ( lstData.size() > 0 ) {
	                for ( int curRow = 0; curRow < lstData.size(); curRow++ ) {
	                	SerialSubVO beanSub = (SerialSubVO) lstData.get(curRow);
	                	beanSub.setOption("delete");
	                	rtn = serialDAO.infupdate(beanSub);
	                	logger.info("serialDAO.infupdate Result : " + rtn);
	                }
	        	}
	        	strErrMessage = "1";
			} else{
            	strErrMessage = "계산서 저장 에러";
            	transactionManager(strErrMessage, status);
            	return strErrMessage;
            }

			// 4. 계산서 상세 내역 삭제
			if(strErrMessage.equals("1")) {
				strErrMessage = String.valueOf(serialDAO.delete(beanMain.getSerial()));
            	logger.info("serialDAO.delete Result : " + strErrMessage);
            	if(strErrMessage.equals("0")) {
            		strErrMessage = "1";
            	}
			} else{ 
            	strErrMessage = "계산서 상세내역 삭제 에러";
            	transactionManager(strErrMessage, status);
            	return strErrMessage;
            }
			
			// 5. 계산서 상세 내역 재입력
			if(strErrMessage.equals("1")) {
				for (int curRow = 0; curRow < lstDataSub.size(); curRow++) {
                	// 계산서 상세에 들어갈 계산서 번호 세팅
					SerialSubVO beanSub = (SerialSubVO) lstDataSub.get(curRow);
					beanSub.setSerial(beanMain.getSerial());
					beanSub.setTran_seq(FormatUtil.getNum(curRow + 1));
					strErrMessage = String.valueOf(serialDAO.insertShipperSub(beanSub));
                	logger.info("serialDAO.insertShipperSub Result : " + strErrMessage);
                }
			} else{
            	strErrMessage = "계산서 상세 내역 재입력 에러";
            	transactionManager(strErrMessage, status);
            	return strErrMessage;
            }
			
			//6. 미처리거래명세서 I/F UPDATE
            if (strErrMessage.equals("1")) {
                for ( int curRow = 0; curRow < lstDataSub.size(); curRow++ ) {
                	SerialSubVO beanSub = (SerialSubVO) lstDataSub.get(curRow);
                	beanSub.setOption("save");
                	strErrMessage = String.valueOf(serialDAO.infupdate(beanSub));
                	logger.info("serialDAO.infupdate Result6 : " + strErrMessage);
                }
	        	strErrMessage = "1";
            } else{
            	strErrMessage = "미처리거래명세서 I/F UPDATE";
            	transactionManager(strErrMessage, status);
            	return strErrMessage;
            }

        	logger.info("67  : " + strErrMessage);
            //7. 입금내역 처리  process update(처리여부)
            if (strErrMessage.equals("1")) {
                for ( int curRow = 0; curRow < lstDatainaccount.size(); curRow++ ) {
                	VirAcctVO bean = (VirAcctVO) lstDatainaccount.get(curRow);
                	
                	strErrMessage = String.valueOf(serialDAO.updateProgress(bean.getIstcd(), bean.getVir_acctno(), bean.getTran_dd(), bean.getTran_hh()
                					, bean.getVatrsno(), beanMain.getSerial(), bean.getVatramt()));

                	logger.info("serialDAO.updateProgress Result : " + strErrMessage);
                }
            } else{
            	strErrMessage = "입금내역 처리";
            	transactionManager(strErrMessage, status);
            	return strErrMessage;
            }
            
    	} catch (Exception e) {
        	logger.info("transactionManager.rollback");
			e.printStackTrace();
			transactionManager.rollback(status);
			strErrMessage = "에러 롤백 1";
		}
 
		return strErrMessage;
	}
	
	public void transactionManager(String strErrMessage, TransactionStatus status) {
		if (strErrMessage.equals("1")) {
        	logger.info("transactionManager.commited : " + strErrMessage);
    		logger.info("transactionManager.isCompleted : " + status.isCompleted());
			transactionManager.commit(status);	
    		status.flush();
    		logger.info("transactionManager.isCompleted : " + status.isCompleted());
    		
        } else{
        	logger.info("transactionManager.rollback : " + strErrMessage);
    		logger.info("transactionManager.isCompleted : " + status.isCompleted());
			transactionManager.rollback(status);	
    		status.flush();
    		logger.info("transactionManager.isCompleted : " + status.isCompleted());
        }
	}
	
	@Override
	public String getNewSerial(String strDate) {
		SimpleDateFormat format1 = new SimpleDateFormat ("yyyyMMdd");
		Date time = new Date();	
		
		String sysDate = format1.format(time);
		String serialNo = serialDAO.getNewSerial(strDate);
		
		if(serialNo.equals("0")) {
	    	sysDate += "0001";
	    	return sysDate;
		}
		else {
			sysDate += FormatUtil.lpad(new Integer(FormatUtil.getInt(FormatUtil.Right(serialNo, 4)) + 1).toString(), "0", 4);
			serialNo = sysDate;
			return serialNo;
		}
	}
	
	@Override
	public String getNewSerialSequence() {
		String serialNo = serialDAO.getNewSerialSequence();
		
		return serialNo;
	}
	
	@Override
	public int getDataBySerial(String strSerial) {
		try {
			serialDAO.getDataBySerial(strSerial);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
		return 1;
	}

	@Override
	public int insertShipperMain(SerialMainVO beanMain) throws Exception {
		try {
			serialDAO.insertShipperMain(beanMain);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
		return 1;
	}

	@Override
	public ArrayList<SerialSubVO> getNewSerialSub(String serial) {
		return serialDAO.getNewSerialSub(serial);
	}

	@Override
	public int infupdate(SerialSubVO beanSub) throws Exception {
		try {
			serialDAO.infupdate(beanSub);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
		return 1;
	}

	@Override
	public int delete(String serial) throws Exception {
		try {
			serialDAO.delete(serial);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
		return 1;
	}

	@Override
	public int insertShipperSub(SerialSubVO beanSub) throws Exception {
		try {
			serialDAO.insertShipperSub(beanSub);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
		return 1;
	}

	@Override
	public int updateProgress(String istcd, String vir_acctno, String tran_dd, String tran_hh, String vatrsno, String serial, String vatramt) throws Exception {
		try {
			serialDAO.updateProgress(istcd, vir_acctno, tran_dd, tran_hh, vatrsno, serial, vatramt);
		} catch (Exception e) {
			e.printStackTrace();
			return 0;
		}
		return 1;
	}
}
